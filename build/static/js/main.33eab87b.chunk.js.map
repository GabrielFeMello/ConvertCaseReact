{"version":3,"sources":["components/AppHeader/index.js","components/ConverCaseFormatter/index.js","App.js","index.js"],"names":["AppHeader","className","ConverCaseFormatter","useState","convertCase","setConvertCase","singleClass","setSingleClass","multipleClass","setMultipleClass","handleMultipleClass","new_class","includes","filter","a","fontFormatTitles","capitalize","uppercase","lowercase","alternatetext","class","join","value","onChange","inputReturn","newValue","target","placeholder","onClick","split","map","content","phrase","sanitizePhrase","fontFormat","newClass","lastValue","toLowerCase","letter","index","toUpperCase","lowOrUp","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAUeA,MARf,WACE,OACE,wBAAQC,UAAU,aAAlB,SACE,8C,oBCoISC,MAtIf,WAAgC,IAAD,EACSC,mBAAS,IADlB,mBACtBC,EADsB,KACTC,EADS,OAESF,mBAAS,IAFlB,mBAEtBG,EAFsB,KAETC,EAFS,OAGaJ,mBAAS,IAHtB,mBAGtBK,EAHsB,KAGPC,EAHO,KA4B7B,SAASC,EAAoBC,GACvBH,EAAcI,SAASD,GACzBF,EAAiBD,EAAcK,QAAO,SAACC,GAAD,OAAOA,IAAMH,MAEnDF,EAAiB,GAAD,mBAAKD,GAAL,CAAoBG,KAcxC,IAAMI,EAAmB,CACvBC,WAAY,wBACZC,UAAW,oBACXC,UAAW,oBACXC,cAAe,mBAGjB,OACE,sBAAKC,MAAM,YAAX,UACE,0BACEnB,UAAS,wBAAmBK,EAAnB,YAAkCE,EAAca,KAAK,MAC9DC,MAAOlB,EACPmB,SArDN,SAAmCC,GACjC,IAAMC,EAAWD,EAAYE,OAAOJ,MACpCjB,EAAeoB,IAoDXE,YAAY,0BAEd,iDACA,sBAAKP,MAAM,WAAX,UACE,wBACEQ,QA7BR,WAOExB,EAAYyB,MAAM,MAAMC,KAAI,SAAAC,GAAO,OAHnC,SAAwBA,GACtB,OAAOA,EAAQF,MAAM,KAAKC,KAAI,SAAAE,GAAM,MAH7B,MAGiDX,KAAK,KAE1BY,CAAeF,MAAUV,KAAK,MACnEd,EAAe,gBAsBTN,UAA2B,gBAAhBK,EAAgC,cAAgB,GAF7D,iCAMC,CAAC,aAAc,YAAa,YAAa,iBAAiBwB,KACzD,SAACI,GACC,OACE,wBACEN,QAAS,iBACQ,kBAAfM,GAnDcC,EAoDWD,EAnDvC7B,GAAe,SAAC+B,GAAD,OAAeA,EAAUC,sBACxC9B,EAAe4B,KAXf9B,GAAe,SAAC+B,GACd,OAAOA,EACJP,MAAM,IACNC,KAAI,SAACQ,EAAQC,GAAT,OANT,SAAiBD,EAAQC,GACvB,OAAOA,EAAQ,GAAK,EAAID,EAAOE,cAAgBF,EAAOD,cAK5BI,CAAQH,EAAQC,MACvClB,KAAK,YAEVd,EAAe,kBAGjB,IAA8B4B,GAuDhBlC,UAAWK,IAAgB4B,EAAa,cAAgB,GAN1D,SAQGnB,EAAiBmB,WAM5B,sBAAKd,MAAM,WAAX,UACE,wBACEQ,QAAS,kBAAMlB,EAAoB,cACnCT,UAAS,oBACPO,EAAcI,SAAS,aAAe,cAAgB,IAH1D,sBAQA,wBACEgB,QAAS,kBAAMlB,EAAoB,aACnCT,UAAS,mBACPO,EAAcI,SAAS,YAAc,cAAgB,IAHzD,sBASA,wBACEgB,QAAS,kBAAMlB,EAAoB,iBACnCT,UAAS,uBACPO,EAAcI,SAAS,gBAAkB,cAAgB,IAH7D,sBAQA,wBACEgB,QAAS,kBAAMlB,EAAoB,WACnCT,UAAS,iBACPO,EAAcI,SAAS,UAAY,cAAgB,IAHvD,wBASA,wBACEgB,QAAS,kBAAMlB,EAAoB,SACnCT,UAAS,eACPO,EAAcI,SAAS,QAAU,cAAgB,IAHrD,4BC/GO8B,MATf,WACE,OACE,sBAAKzC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCFN0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.33eab87b.chunk.js","sourcesContent":["import \"./style.css\";\n\nfunction AppHeader() {\n  return (\n    <header className=\"App-header\">\n      <a>Formatador</a>\n    </header>\n  );\n}\n\nexport default AppHeader;\n","import { useState } from \"react\";\nimport \"./style.css\";\n\nfunction ConverCaseFormatter() {\n  const [convertCase, setConvertCase] = useState(\"\");\n  const [singleClass, setSingleClass] = useState(\"\");\n  const [multipleClass, setMultipleClass] = useState([]);\n\n  function handleChangeOriginalValue(inputReturn) {\n    const newValue = inputReturn.target.value;\n    setConvertCase(newValue);\n  }\n\n  function handleAlternateText() {\n    function lowOrUp(letter, index) {\n      return index % 2 == 0 ? letter.toUpperCase() : letter.toLowerCase();\n    }\n    setConvertCase((lastValue) => {\n      return lastValue\n        .split(\"\")\n        .map((letter, index) => lowOrUp(letter, index))\n        .join(\"\");\n    });\n    setSingleClass(\"alternatetext\");\n  }\n\n  function handleSetSingleClass(newClass) {\n    setConvertCase((lastValue) => lastValue.toLowerCase());\n    setSingleClass(newClass);\n  }\n\n  function handleMultipleClass(new_class) {\n    if (multipleClass.includes(new_class)) {\n      setMultipleClass(multipleClass.filter((a) => a !== new_class));\n    } else {\n      setMultipleClass([...multipleClass, new_class]);\n    }\n  }\n  function handlePhraseStart() {\n    function clearDot(phrase) {\n      return \"\";\n    }\n    function sanitizePhrase(content){\n      return content.split('.').map(phrase=>clearDot(phrase)).join(\".\")\n    }\n    convertCase.split(\"\\n\").map(content=>sanitizePhrase(content)).join(\"\\n\")\n    setSingleClass(\"phraseStart\");\n  }\n\n  const fontFormatTitles = {\n    capitalize: \"Primeira Maiúscula\",\n    uppercase: \"Tudo maiúsculo\",\n    lowercase: \"Tudo minúsculo\",\n    alternatetext: \"TeXtO aLtErNaDo\",\n  };\n\n  return (\n    <div class=\"container\">\n      <textarea\n        className={`textareaInput ${singleClass} ${multipleClass.join(\" \")}`}\n        value={convertCase}\n        onChange={handleChangeOriginalValue}\n        placeholder=\"Digite seu texto aqui\"\n      />\n      <p>Formatação</p>\n      <div class=\"btnGroup\">\n        <button\n          onClick={handlePhraseStart}\n          className={singleClass === \"phraseStart\" ? \"activeClass\" : \"\"}\n        >\n          Começo de frase.\n        </button>\n        {[\"capitalize\", \"uppercase\", \"lowercase\", \"alternatetext\"].map(\n          (fontFormat) => {\n            return (\n              <button\n                onClick={() =>\n                  fontFormat !== \"alternatetext\"\n                    ? handleSetSingleClass(fontFormat)\n                    : handleAlternateText()\n                }\n                className={singleClass === fontFormat ? \"activeClass\" : \"\"}\n              >\n                {fontFormatTitles[fontFormat]}\n              </button>\n            );\n          }\n        )}\n      </div>\n      <div class=\"btnGroup\">\n        <button\n          onClick={() => handleMultipleClass(\"underline\")}\n          className={`underline ${\n            multipleClass.includes(\"underline\") ? \"activeClass\" : \"\"\n          }`}\n        >\n          sublinar\n        </button>\n        <button\n          onClick={() => handleMultipleClass(\"overline\")}\n          className={`overline ${\n            multipleClass.includes(\"overline\") ? \"activeClass\" : \"\"\n          }`}\n        >\n          sublinar\n        </button>\n\n        <button\n          onClick={() => handleMultipleClass(\"line-through\")}\n          className={`line-through ${\n            multipleClass.includes(\"line-through\") ? \"activeClass\" : \"\"\n          }`}\n        >\n          sublinar\n        </button>\n        <button\n          onClick={() => handleMultipleClass(\"italic\")}\n          className={`italic ${\n            multipleClass.includes(\"italic\") ? \"activeClass\" : \"\"\n          }`}\n        >\n          Itálico\n        </button>\n\n        <button\n          onClick={() => handleMultipleClass(\"bold\")}\n          className={`bold ${\n            multipleClass.includes(\"bold\") ? \"activeClass\" : \"\"\n          }`}\n        >\n          Negrito\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ConverCaseFormatter;\n","import \"./App.css\";\nimport AppHeader from \"./components/AppHeader\";\nimport ConverCaseFormatter from \"./components/ConverCaseFormatter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <ConverCaseFormatter />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}